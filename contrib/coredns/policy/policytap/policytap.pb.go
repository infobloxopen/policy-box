// Code generated by protoc-gen-go. DO NOT EDIT.
// source: policytap/policytap.proto

/*
Package policytap is a generated protocol buffer package.

It is generated from these files:
	policytap/policytap.proto

It has these top-level messages:
	DnstapAttribute
	PolicyHitMessage
	PolicyHitMessageWrapper
	ExtraAttributes
*/
package policytap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dnstap1 "github.com/dnstap/golang-dnstap"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// policy actions of interest
type PolicyHitMessage_PolicyActionType int32

const (
	PolicyHitMessage_POLICY_ACTION_DENY        PolicyHitMessage_PolicyActionType = 1
	PolicyHitMessage_POLICY_ACTION_PASSTHROUGH PolicyHitMessage_PolicyActionType = 2
	PolicyHitMessage_POLICY_ACTION_NXDOMAIN    PolicyHitMessage_PolicyActionType = 3
	PolicyHitMessage_POLICY_ACTION_REDIRECT    PolicyHitMessage_PolicyActionType = 4
	PolicyHitMessage_POLICY_ACTION_REFUSE      PolicyHitMessage_PolicyActionType = 5
)

var PolicyHitMessage_PolicyActionType_name = map[int32]string{
	1: "POLICY_ACTION_DENY",
	2: "POLICY_ACTION_PASSTHROUGH",
	3: "POLICY_ACTION_NXDOMAIN",
	4: "POLICY_ACTION_REDIRECT",
	5: "POLICY_ACTION_REFUSE",
}
var PolicyHitMessage_PolicyActionType_value = map[string]int32{
	"POLICY_ACTION_DENY":        1,
	"POLICY_ACTION_PASSTHROUGH": 2,
	"POLICY_ACTION_NXDOMAIN":    3,
	"POLICY_ACTION_REDIRECT":    4,
	"POLICY_ACTION_REFUSE":      5,
}

func (x PolicyHitMessage_PolicyActionType) Enum() *PolicyHitMessage_PolicyActionType {
	p := new(PolicyHitMessage_PolicyActionType)
	*p = x
	return p
}
func (x PolicyHitMessage_PolicyActionType) String() string {
	return proto.EnumName(PolicyHitMessage_PolicyActionType_name, int32(x))
}
func (x *PolicyHitMessage_PolicyActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PolicyHitMessage_PolicyActionType_value, data, "PolicyHitMessage_PolicyActionType")
	if err != nil {
		return err
	}
	*x = PolicyHitMessage_PolicyActionType(value)
	return nil
}
func (PolicyHitMessage_PolicyActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

// two types of policy trigger
type PolicyHitMessage_PolicyTriggerType int32

const (
	PolicyHitMessage_POLICY_TRIGGER_ADDRESS PolicyHitMessage_PolicyTriggerType = 1
	PolicyHitMessage_POLICY_TRIGGER_DOMAIN  PolicyHitMessage_PolicyTriggerType = 2
)

var PolicyHitMessage_PolicyTriggerType_name = map[int32]string{
	1: "POLICY_TRIGGER_ADDRESS",
	2: "POLICY_TRIGGER_DOMAIN",
}
var PolicyHitMessage_PolicyTriggerType_value = map[string]int32{
	"POLICY_TRIGGER_ADDRESS": 1,
	"POLICY_TRIGGER_DOMAIN":  2,
}

func (x PolicyHitMessage_PolicyTriggerType) Enum() *PolicyHitMessage_PolicyTriggerType {
	p := new(PolicyHitMessage_PolicyTriggerType)
	*p = x
	return p
}
func (x PolicyHitMessage_PolicyTriggerType) String() string {
	return proto.EnumName(PolicyHitMessage_PolicyTriggerType_name, int32(x))
}
func (x *PolicyHitMessage_PolicyTriggerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PolicyHitMessage_PolicyTriggerType_value, data, "PolicyHitMessage_PolicyTriggerType")
	if err != nil {
		return err
	}
	*x = PolicyHitMessage_PolicyTriggerType(value)
	return nil
}
func (PolicyHitMessage_PolicyTriggerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 1}
}

type DnstapAttribute struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Type             *string `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	Value            *string `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DnstapAttribute) Reset()                    { *m = DnstapAttribute{} }
func (m *DnstapAttribute) String() string            { return proto.CompactTextString(m) }
func (*DnstapAttribute) ProtoMessage()               {}
func (*DnstapAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DnstapAttribute) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *DnstapAttribute) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DnstapAttribute) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type PolicyHitMessage struct {
	// Policy hit time, in seconds and nanoseconds since the UNIX epoch.
	TimeSec  *uint64 `protobuf:"varint,1,req,name=time_sec,json=timeSec" json:"time_sec,omitempty"`
	TimeNsec *uint32 `protobuf:"fixed32,2,req,name=time_nsec,json=timeNsec" json:"time_nsec,omitempty"`
	// DNS query/transaction id; this is a 16-bit value, but
	// ProtocolBuffers interface defines only longer integers.
	QueryId *uint32 `protobuf:"varint,3,req,name=query_id,json=queryId" json:"query_id,omitempty"`
	// Policy Trigger Type -- domain name or address
	TriggerType *PolicyHitMessage_PolicyTriggerType `protobuf:"varint,4,req,name=trigger_type,json=triggerType,enum=policytap.PolicyHitMessage_PolicyTriggerType" json:"trigger_type,omitempty"`
	// DNS query type, which is one of standard DNS resource record types;
	// see http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4
	QueryType *uint32 `protobuf:"varint,5,req,name=query_type,json=queryType" json:"query_type,omitempty"`
	// Name of the queried domain
	QueryName *string `protobuf:"bytes,6,req,name=query_name,json=queryName" json:"query_name,omitempty"`
	// Policy action taken
	PolicyAction *PolicyHitMessage_PolicyActionType `protobuf:"varint,7,req,name=policy_action,json=policyAction,enum=policytap.PolicyHitMessage_PolicyActionType" json:"policy_action,omitempty"`
	// Policy ID
	PolicyId []byte `protobuf:"bytes,8,opt,name=policy_id,json=policyId" json:"policy_id,omitempty"`
	// Redirect record type, one of the values from the standard
	// set (see comment for query_type above) if policy type is
	// POLICY_ACTION_REDIRECT
	RedirectRrType *uint32 `protobuf:"varint,9,opt,name=redirect_rr_type,json=redirectRrType" json:"redirect_rr_type,omitempty"`
	// Redirect record data (in conjunction with
	// POLICY_ACTION_REDIRECT, see above)
	RedirectRrData   *string            `protobuf:"bytes,10,opt,name=redirect_rr_data,json=redirectRrData" json:"redirect_rr_data,omitempty"`
	Attributes       []*DnstapAttribute `protobuf:"bytes,15,rep,name=attributes" json:"attributes,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PolicyHitMessage) Reset()                    { *m = PolicyHitMessage{} }
func (m *PolicyHitMessage) String() string            { return proto.CompactTextString(m) }
func (*PolicyHitMessage) ProtoMessage()               {}
func (*PolicyHitMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PolicyHitMessage) GetTimeSec() uint64 {
	if m != nil && m.TimeSec != nil {
		return *m.TimeSec
	}
	return 0
}

func (m *PolicyHitMessage) GetTimeNsec() uint32 {
	if m != nil && m.TimeNsec != nil {
		return *m.TimeNsec
	}
	return 0
}

func (m *PolicyHitMessage) GetQueryId() uint32 {
	if m != nil && m.QueryId != nil {
		return *m.QueryId
	}
	return 0
}

func (m *PolicyHitMessage) GetTriggerType() PolicyHitMessage_PolicyTriggerType {
	if m != nil && m.TriggerType != nil {
		return *m.TriggerType
	}
	return PolicyHitMessage_POLICY_TRIGGER_ADDRESS
}

func (m *PolicyHitMessage) GetQueryType() uint32 {
	if m != nil && m.QueryType != nil {
		return *m.QueryType
	}
	return 0
}

func (m *PolicyHitMessage) GetQueryName() string {
	if m != nil && m.QueryName != nil {
		return *m.QueryName
	}
	return ""
}

func (m *PolicyHitMessage) GetPolicyAction() PolicyHitMessage_PolicyActionType {
	if m != nil && m.PolicyAction != nil {
		return *m.PolicyAction
	}
	return PolicyHitMessage_POLICY_ACTION_DENY
}

func (m *PolicyHitMessage) GetPolicyId() []byte {
	if m != nil {
		return m.PolicyId
	}
	return nil
}

func (m *PolicyHitMessage) GetRedirectRrType() uint32 {
	if m != nil && m.RedirectRrType != nil {
		return *m.RedirectRrType
	}
	return 0
}

func (m *PolicyHitMessage) GetRedirectRrData() string {
	if m != nil && m.RedirectRrData != nil {
		return *m.RedirectRrData
	}
	return ""
}

func (m *PolicyHitMessage) GetAttributes() []*DnstapAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type PolicyHitMessageWrapper struct {
	PolicyHit        *PolicyHitMessage `protobuf:"bytes,1001,req,name=policy_hit,json=policyHit" json:"policy_hit,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PolicyHitMessageWrapper) Reset()                    { *m = PolicyHitMessageWrapper{} }
func (m *PolicyHitMessageWrapper) String() string            { return proto.CompactTextString(m) }
func (*PolicyHitMessageWrapper) ProtoMessage()               {}
func (*PolicyHitMessageWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PolicyHitMessageWrapper) GetPolicyHit() *PolicyHitMessage {
	if m != nil {
		return m.PolicyHit
	}
	return nil
}

// Collection of attributes to be stored in Dnstap.extra (in wire format)
type ExtraAttributes struct {
	Attributes       []*DnstapAttribute `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ExtraAttributes) Reset()                    { *m = ExtraAttributes{} }
func (m *ExtraAttributes) String() string            { return proto.CompactTextString(m) }
func (*ExtraAttributes) ProtoMessage()               {}
func (*ExtraAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExtraAttributes) GetAttributes() []*DnstapAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

var E_PolicyHit = &proto.ExtensionDesc{
	ExtendedType:  (*dnstap1.Dnstap)(nil),
	ExtensionType: (*PolicyHitMessage)(nil),
	Field:         1001,
	Name:          "policytap.policy_hit",
	Tag:           "bytes,1001,opt,name=policy_hit,json=policyHit",
	Filename:      "policytap/policytap.proto",
}

func init() {
	proto.RegisterType((*DnstapAttribute)(nil), "policytap.DnstapAttribute")
	proto.RegisterType((*PolicyHitMessage)(nil), "policytap.PolicyHitMessage")
	proto.RegisterType((*PolicyHitMessageWrapper)(nil), "policytap.PolicyHitMessageWrapper")
	proto.RegisterType((*ExtraAttributes)(nil), "policytap.ExtraAttributes")
	proto.RegisterEnum("policytap.PolicyHitMessage_PolicyActionType", PolicyHitMessage_PolicyActionType_name, PolicyHitMessage_PolicyActionType_value)
	proto.RegisterEnum("policytap.PolicyHitMessage_PolicyTriggerType", PolicyHitMessage_PolicyTriggerType_name, PolicyHitMessage_PolicyTriggerType_value)
	proto.RegisterExtension(E_PolicyHit)
}

func init() { proto.RegisterFile("policytap/policytap.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcb, 0x6e, 0x9b, 0x4c,
	0x14, 0x16, 0xc4, 0xfe, 0x1d, 0x4e, 0x12, 0x87, 0x7f, 0x94, 0xa6, 0x38, 0x51, 0x24, 0xc4, 0x8a,
	0x45, 0xe2, 0x48, 0x59, 0xa6, 0x2b, 0x14, 0x68, 0x4c, 0xd3, 0x60, 0x77, 0x20, 0x6d, 0xb3, 0x42,
	0x13, 0x18, 0x91, 0x91, 0x6c, 0x43, 0x61, 0x5c, 0xd5, 0xcf, 0xd2, 0x87, 0xeb, 0xba, 0x6f, 0x51,
	0x31, 0x60, 0x1b, 0x13, 0xa9, 0x97, 0x15, 0x73, 0xbe, 0xef, 0x5c, 0xbe, 0x73, 0x01, 0x06, 0x59,
	0x3a, 0x65, 0xd1, 0x92, 0x93, 0xec, 0x72, 0xfd, 0x1a, 0x66, 0x79, 0xca, 0x53, 0xa4, 0xac, 0x81,
	0x93, 0xf3, 0x84, 0xf1, 0xe7, 0xc5, 0xd3, 0x30, 0x4a, 0x67, 0x97, 0xf1, 0xbc, 0x28, 0xbd, 0x93,
	0x74, 0x4a, 0xe6, 0xc9, 0x45, 0x6d, 0x55, 0x9f, 0x2a, 0xd0, 0xb8, 0x83, 0x43, 0x5b, 0xd8, 0x16,
	0xe7, 0x39, 0x7b, 0x5a, 0x70, 0x8a, 0xfa, 0x20, 0xb3, 0x58, 0x93, 0x74, 0xd9, 0x54, 0xb0, 0xcc,
	0x62, 0x84, 0xa0, 0xc3, 0x97, 0x19, 0xd5, 0x64, 0x81, 0x88, 0x37, 0x3a, 0x82, 0xee, 0x57, 0x32,
	0x5d, 0x50, 0x6d, 0x47, 0x80, 0x95, 0x61, 0xfc, 0xe8, 0x82, 0x3a, 0x11, 0x42, 0x46, 0x8c, 0xdf,
	0xd3, 0xa2, 0x20, 0x09, 0x45, 0x03, 0xd8, 0xe5, 0x6c, 0x46, 0xc3, 0x82, 0x46, 0x22, 0x69, 0x07,
	0xf7, 0x4a, 0xdb, 0xa7, 0x11, 0x3a, 0x05, 0x45, 0x50, 0xf3, 0x92, 0x2b, 0xd3, 0xf7, 0xb0, 0xf0,
	0xf5, 0x0a, 0x1a, 0x95, 0x71, 0x5f, 0x16, 0x34, 0x5f, 0x86, 0x2c, 0x16, 0x55, 0x0e, 0x70, 0x4f,
	0xd8, 0x6e, 0x8c, 0x26, 0xb0, 0xcf, 0x73, 0x96, 0x24, 0x34, 0x0f, 0x85, 0xb2, 0x8e, 0x2e, 0x9b,
	0xfd, 0xab, 0x8b, 0xe1, 0x66, 0x2a, 0x6d, 0x15, 0x35, 0x10, 0x54, 0x51, 0xc1, 0x32, 0xa3, 0x78,
	0x8f, 0x6f, 0x0c, 0x74, 0x06, 0x50, 0x15, 0x13, 0xf9, 0xba, 0xa2, 0x9c, 0x22, 0x90, 0x6d, 0x7a,
	0x4e, 0x66, 0x54, 0xfb, 0x4f, 0xf4, 0x5c, 0xd1, 0x1e, 0x99, 0x51, 0xf4, 0x01, 0x0e, 0xaa, 0xd2,
	0x21, 0x89, 0x38, 0x4b, 0xe7, 0x5a, 0x4f, 0x08, 0x3a, 0xff, 0xb3, 0x20, 0x4b, 0xf8, 0x0b, 0x3d,
	0xfb, 0x59, 0x03, 0x29, 0x47, 0x53, 0xa7, 0x64, 0xb1, 0xb6, 0xab, 0x4b, 0xe6, 0x3e, 0xde, 0xad,
	0x00, 0x37, 0x46, 0x26, 0xa8, 0x39, 0x8d, 0x59, 0x4e, 0x23, 0x1e, 0xe6, 0xf5, 0x0c, 0x14, 0x5d,
	0x32, 0x0f, 0x70, 0x7f, 0x85, 0xe3, 0xaa, 0xaf, 0x96, 0x67, 0x4c, 0x38, 0xd1, 0x40, 0x97, 0x4c,
	0xa5, 0xe9, 0x69, 0x13, 0x4e, 0xd0, 0x35, 0x00, 0x59, 0x9d, 0x40, 0xa1, 0x1d, 0xea, 0x3b, 0xe6,
	0xde, 0xd5, 0x49, 0xa3, 0x81, 0xd6, 0x95, 0xe0, 0x86, 0xb7, 0xf1, 0x5d, 0x5a, 0xed, 0x7d, 0xd3,
	0x0f, 0x3a, 0x06, 0x34, 0x19, 0xbf, 0x77, 0x6f, 0x1e, 0x43, 0xeb, 0x26, 0x70, 0xc7, 0x5e, 0x68,
	0x3b, 0xde, 0xa3, 0x2a, 0xa1, 0x33, 0x18, 0x6c, 0xe3, 0x13, 0xcb, 0xf7, 0x83, 0x11, 0x1e, 0x3f,
	0xdc, 0x8e, 0x54, 0x19, 0x9d, 0xc0, 0xf1, 0x36, 0xed, 0x7d, 0xb6, 0xc7, 0xf7, 0x96, 0xeb, 0xa9,
	0x3b, 0x2f, 0x39, 0xec, 0xd8, 0x2e, 0x76, 0x6e, 0x02, 0xb5, 0x83, 0x34, 0x38, 0x6a, 0x73, 0x6f,
	0x1f, 0x7c, 0x47, 0xed, 0x1a, 0xef, 0xe0, 0xff, 0x17, 0xdb, 0x6f, 0xa4, 0x0a, 0xb0, 0x7b, 0x7b,
	0xeb, 0xe0, 0xd0, 0xb2, 0x6d, 0xec, 0xf8, 0xbe, 0x2a, 0xa1, 0x01, 0xbc, 0x6a, 0x71, 0xb5, 0x02,
	0xd9, 0xf8, 0x08, 0xaf, 0xdb, 0x9b, 0xfc, 0x94, 0x93, 0x2c, 0xa3, 0x39, 0x7a, 0x03, 0x50, 0x6f,
	0xec, 0x99, 0x71, 0xed, 0x67, 0x79, 0x02, 0x7b, 0x57, 0xa7, 0xbf, 0x39, 0x01, 0x5c, 0x6f, 0x78,
	0xc4, 0xb8, 0x71, 0x0f, 0x87, 0xce, 0x37, 0x9e, 0x93, 0xf5, 0x7c, 0x8b, 0xd6, 0x42, 0xa4, 0x7f,
	0x59, 0xc8, 0xf5, 0x5d, 0x53, 0x0b, 0xea, 0x0f, 0xeb, 0x5f, 0xbe, 0x0a, 0x29, 0xb5, 0x49, 0x7f,
	0xaf, 0xed, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xf6, 0x2d, 0x16, 0x77, 0x04, 0x00, 0x00,
}
