// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pip.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	pip.proto

It has these top-level messages:
	Msg
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Msg struct {
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Msg) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Msg)(nil), "service.Msg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PIP service

type PIPClient interface {
	Map(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
	NewMappingStream(ctx context.Context, opts ...grpc.CallOption) (PIP_NewMappingStreamClient, error)
}

type pIPClient struct {
	cc *grpc.ClientConn
}

func NewPIPClient(cc *grpc.ClientConn) PIPClient {
	return &pIPClient{cc}
}

func (c *pIPClient) Map(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := grpc.Invoke(ctx, "/service.PIP/Map", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pIPClient) NewMappingStream(ctx context.Context, opts ...grpc.CallOption) (PIP_NewMappingStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PIP_serviceDesc.Streams[0], c.cc, "/service.PIP/NewMappingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pIPNewMappingStreamClient{stream}
	return x, nil
}

type PIP_NewMappingStreamClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type pIPNewMappingStreamClient struct {
	grpc.ClientStream
}

func (x *pIPNewMappingStreamClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pIPNewMappingStreamClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PIP service

type PIPServer interface {
	Map(context.Context, *Msg) (*Msg, error)
	NewMappingStream(PIP_NewMappingStreamServer) error
}

func RegisterPIPServer(s *grpc.Server, srv PIPServer) {
	s.RegisterService(&_PIP_serviceDesc, srv)
}

func _PIP_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PIPServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.PIP/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PIPServer).Map(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PIP_NewMappingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PIPServer).NewMappingStream(&pIPNewMappingStreamServer{stream})
}

type PIP_NewMappingStreamServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type pIPNewMappingStreamServer struct {
	grpc.ServerStream
}

func (x *pIPNewMappingStreamServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pIPNewMappingStreamServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PIP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.PIP",
	HandlerType: (*PIPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Map",
			Handler:    _PIP_Map_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewMappingStream",
			Handler:       _PIP_NewMappingStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pip.proto",
}

func init() { proto.RegisterFile("pip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc8, 0x2c, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x55, 0x92,
	0xe4, 0x62, 0xf6, 0x2d, 0x4e, 0x17, 0x12, 0xe2, 0x62, 0x49, 0xca, 0x4f, 0xa9, 0x94, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x8d, 0x12, 0xb8, 0x98, 0x03, 0x3c, 0x03, 0x84, 0x94, 0xb9,
	0x98, 0x7d, 0x13, 0x0b, 0x84, 0x78, 0xf4, 0xa0, 0x5a, 0xf4, 0x7c, 0x8b, 0xd3, 0xa5, 0x50, 0x78,
	0x4a, 0x0c, 0x42, 0x26, 0x5c, 0x02, 0x7e, 0xa9, 0xe5, 0xbe, 0x89, 0x05, 0x05, 0x99, 0x79, 0xe9,
	0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0xf8, 0x75, 0x68, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0x1d,
	0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xfd, 0xef, 0x79, 0x99, 0x00, 0x00, 0x00,
}
