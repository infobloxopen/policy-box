// Code generated by protoc-gen-go.
// source: control.proto
// DO NOT EDIT!

/*
Package control is a generated protocol buffer package.

It is generated from these files:
	control.proto

It has these top-level messages:
	Item
	Chunk
	Response
*/
package control

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Item_DataType int32

const (
	Item_POLICIES Item_DataType = 0
	Item_CONTENT  Item_DataType = 1
)

var Item_DataType_name = map[int32]string{
	0: "POLICIES",
	1: "CONTENT",
}
var Item_DataType_value = map[string]int32{
	"POLICIES": 0,
	"CONTENT":  1,
}

func (x Item_DataType) String() string {
	return proto.EnumName(Item_DataType_name, int32(x))
}
func (Item_DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Response_Status int32

const (
	Response_ACK       Response_Status = 0
	Response_ERROR     Response_Status = 1
	Response_TAG_ERROR Response_Status = 2
)

var Response_Status_name = map[int32]string{
	0: "ACK",
	1: "ERROR",
	2: "TAG_ERROR",
}
var Response_Status_value = map[string]int32{
	"ACK":       0,
	"ERROR":     1,
	"TAG_ERROR": 2,
}

func (x Response_Status) String() string {
	return proto.EnumName(Response_Status_name, int32(x))
}
func (Response_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Item struct {
	Type    Item_DataType `protobuf:"varint,1,opt,name=type,enum=control.Item_DataType" json:"type,omitempty"`
	FromTag string        `protobuf:"bytes,2,opt,name=fromTag" json:"fromTag,omitempty"`
	ToTag   string        `protobuf:"bytes,3,opt,name=toTag" json:"toTag,omitempty"`
	Id      string        `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Item) GetType() Item_DataType {
	if m != nil {
		return m.Type
	}
	return Item_POLICIES
}

func (m *Item) GetFromTag() string {
	if m != nil {
		return m.FromTag
	}
	return ""
}

func (m *Item) GetToTag() string {
	if m != nil {
		return m.ToTag
	}
	return ""
}

func (m *Item) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Chunk struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Chunk) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Chunk) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Response struct {
	Status  Response_Status `protobuf:"varint,1,opt,name=status,enum=control.Response_Status" json:"status,omitempty"`
	Id      int32           `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Details string          `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetStatus() Response_Status {
	if m != nil {
		return m.Status
	}
	return Response_ACK
}

func (m *Response) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Response) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func init() {
	proto.RegisterType((*Item)(nil), "control.Item")
	proto.RegisterType((*Chunk)(nil), "control.Chunk")
	proto.RegisterType((*Response)(nil), "control.Response")
	proto.RegisterEnum("control.Item_DataType", Item_DataType_name, Item_DataType_value)
	proto.RegisterEnum("control.Response_Status", Response_Status_name, Response_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PDPControl service

type PDPControlClient interface {
	Request(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (PDPControl_UploadClient, error)
}

type pDPControlClient struct {
	cc *grpc.ClientConn
}

func NewPDPControlClient(cc *grpc.ClientConn) PDPControlClient {
	return &pDPControlClient{cc}
}

func (c *pDPControlClient) Request(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/control.PDPControl/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDPControlClient) Upload(ctx context.Context, opts ...grpc.CallOption) (PDPControl_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PDPControl_serviceDesc.Streams[0], c.cc, "/control.PDPControl/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &pDPControlUploadClient{stream}
	return x, nil
}

type PDPControl_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type pDPControlUploadClient struct {
	grpc.ClientStream
}

func (x *pDPControlUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pDPControlUploadClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PDPControl service

type PDPControlServer interface {
	Request(context.Context, *Item) (*Response, error)
	Upload(PDPControl_UploadServer) error
}

func RegisterPDPControlServer(s *grpc.Server, srv PDPControlServer) {
	s.RegisterService(&_PDPControl_serviceDesc, srv)
}

func _PDPControl_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDPControlServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.PDPControl/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDPControlServer).Request(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDPControl_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PDPControlServer).Upload(&pDPControlUploadServer{stream})
}

type PDPControl_UploadServer interface {
	SendAndClose(*Response) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type pDPControlUploadServer struct {
	grpc.ServerStream
}

func (x *pDPControlUploadServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pDPControlUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PDPControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "control.PDPControl",
	HandlerType: (*PDPControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _PDPControl_Request_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _PDPControl_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "control.proto",
}

func init() { proto.RegisterFile("control.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0x5d, 0x4f, 0xc2, 0x30,
	0x14, 0xa5, 0x63, 0x1f, 0x70, 0x15, 0x32, 0x6f, 0x8c, 0x59, 0x7c, 0x22, 0x4d, 0x4c, 0x88, 0xc4,
	0x69, 0xf0, 0x17, 0x90, 0x41, 0x0c, 0xd1, 0x00, 0x29, 0xf3, 0xd9, 0x54, 0x57, 0x95, 0x38, 0xe8,
	0xa4, 0xe5, 0x81, 0xdf, 0xe1, 0x93, 0xff, 0xd6, 0xac, 0xeb, 0x48, 0x8c, 0xbe, 0xed, 0xdc, 0x73,
	0xce, 0xce, 0x3d, 0xb7, 0xd0, 0x79, 0x91, 0x1b, 0xbd, 0x95, 0x79, 0x5c, 0x6c, 0xa5, 0x96, 0x18,
	0x58, 0x48, 0xbf, 0x09, 0xb8, 0x53, 0x2d, 0xd6, 0x78, 0x09, 0xae, 0xde, 0x17, 0x22, 0x22, 0x3d,
	0xd2, 0xef, 0x0e, 0xcf, 0xe2, 0x5a, 0x5f, 0x92, 0xf1, 0x98, 0x6b, 0x9e, 0xee, 0x0b, 0xc1, 0x8c,
	0x06, 0x23, 0x08, 0x5e, 0xb7, 0x72, 0x9d, 0xf2, 0xb7, 0xc8, 0xe9, 0x91, 0x7e, 0x9b, 0xd5, 0x10,
	0x4f, 0xc1, 0xd3, 0xb2, 0x9c, 0x37, 0xcd, 0xbc, 0x02, 0xd8, 0x05, 0x67, 0x95, 0x45, 0xae, 0x19,
	0x39, 0xab, 0x8c, 0x5e, 0x40, 0xab, 0xfe, 0x23, 0x1e, 0x43, 0x6b, 0x31, 0x7f, 0x98, 0x26, 0xd3,
	0xc9, 0x32, 0x6c, 0xe0, 0x11, 0x04, 0xc9, 0x7c, 0x96, 0x4e, 0x66, 0x69, 0x48, 0xe8, 0x00, 0xbc,
	0xe4, 0x7d, 0xb7, 0xf9, 0xb0, 0xfe, 0x72, 0x33, 0xaf, 0xf4, 0x23, 0x82, 0x9b, 0x71, 0xcd, 0x6d,
	0xb8, 0xf9, 0xa6, 0x5f, 0x04, 0x5a, 0x4c, 0xa8, 0x42, 0x6e, 0x94, 0xc0, 0x1b, 0xf0, 0x95, 0xe6,
	0x7a, 0xa7, 0x6c, 0x9d, 0xe8, 0x50, 0xa7, 0x96, 0xc4, 0x4b, 0xc3, 0x33, 0xab, 0xb3, 0x11, 0xce,
	0x21, 0x22, 0x82, 0x20, 0x13, 0x9a, 0xaf, 0x72, 0x65, 0xab, 0xd4, 0x90, 0x0e, 0xc0, 0xaf, 0xbc,
	0x18, 0x40, 0x73, 0x94, 0xdc, 0x87, 0x0d, 0x6c, 0x83, 0x37, 0x61, 0x6c, 0xce, 0x42, 0x82, 0x1d,
	0x68, 0xa7, 0xa3, 0xbb, 0xa7, 0x0a, 0x3a, 0xc3, 0x1c, 0x60, 0x31, 0x5e, 0x24, 0x55, 0x38, 0x5e,
	0x41, 0xc0, 0xc4, 0xe7, 0x4e, 0x28, 0x8d, 0x9d, 0x5f, 0x07, 0x3e, 0x3f, 0xf9, 0xb3, 0x20, 0x6d,
	0xe0, 0x35, 0xf8, 0x8f, 0x45, 0x2e, 0x79, 0x86, 0xdd, 0x03, 0x6d, 0x0e, 0xf2, 0xaf, 0xbc, 0x4f,
	0x9e, 0x7d, 0xf3, 0xb8, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xa0, 0x96, 0x34, 0xed,
	0x01, 0x00, 0x00,
}
